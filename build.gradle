buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0'
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

group = 'ru.goldfinch'
version = '1.0.0'

repositories {
    mavenCentral()

    maven { url = "https://repo.papermc.io/repository/maven-public/" }
    maven { url = "https://oss.sonatype.org/content/groups/public/" }
    maven { url = "https://repo.glaremasters.me/repository/concuncan/" }
    maven { url = "https://repo.codemc.io/repository/maven-public/" }
    maven { url = "https://maven.citizensnpcs.co/repo" }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation 'org.mongodb:mongodb-driver-sync:4.8.1'
    implementation 'org.mongodb:mongodb-driver-async:3.12.11'

    compileOnly "com.destroystokyo.paper:paper-api:1.12.2-R0.1-SNAPSHOT"
    compileOnly "com.grinderwolf:slimeworldmanager-api:2.2.1"
    compileOnly("de.tr7zw:item-nbt-api-plugin:2.11.2")
    compileOnly('net.citizensnpcs:citizens-main:2.0.30-SNAPSHOT') {
        exclude group: '*', module: '*'
    }
    compileOnly 'me.filoghost.holographicdisplays:holographicdisplays-api:3.0.0'

    compileOnly fileTree(dir: 'libs', include: '*.jar')
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

shadowJar {
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}